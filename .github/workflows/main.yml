name: GameCI Template ðŸŽ®

on: push

jobs:
  checklicense:
    name: Check for UNITY_LICENSE in GitHub Secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            export is_unity_license_set="${{ env.UNITY_LICENSE != '' }}"
            echo "is_unity_license_set=$is_unity_license_set" >> $GITHUB_OUTPUT

  activation:
    needs: checklicense
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request manual activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-activate@v2.0.0
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  test:
    needs: checklicense
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Test in ${{ matrix.testMode }} âœ¨
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-project
          restore-keys: |
            Library-test-project-
            Library-

      # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v4.1.1
        id: testRunner
        env:
          # Personal license
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} 
          # Professional license
          # UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          # UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          # UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          # testMode: all
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Output
      - uses: actions/upload-artifact@v3
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  # build:
  #   needs: test
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       unityVersion:
  #         - 2021.3.5f1
  #         - 2023.2.10f1
  #       targetPlatform:
  #         # - StandaloneOSX
  #         # - StandaloneWindows
  #         - StandaloneWindows64
  #         # - iOS
  #         # - Android
  #         - WebGL
  #   steps:
  #     # Checkout
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         lfs: true

  #     # Cache
  #     - uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library-${{ matrix.targetPlatform }}
  #         restore-keys: |
  #           Library-test-project-
  #           Library-

  #     # Build
  #     - uses: game-ci/unity-builder@v4
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         unityVersion: ${{ matrix.unityVersion }}
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #         # allowDirtyBuild: true

  #     # Output
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: Build-${{ matrix.targetPlatform }}
  #         path: build
          
  # buildForMac:
  #   needs: build
  #   name: Build for ${{ matrix.secondTargetPlatform }}
  #   runs-on: macos-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       secondTargetPlatform:
  #         - StandaloneOSX
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #       fetch-depth: 0
  #         lfs: true

  #     - uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library-${{ matrix.secondTargetPlatform }}
  #         restore-keys: |
  #           Library-test-project-
  #           Library-

  #     - uses: game-ci/unity-builder@v4
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         unityVersion: ${{ matrix.unityVersion }}
  #         targetPlatform: ${{ matrix.secondTargetPlatform }}

  #     - uses: actions/upload-artifact@v3        
  #       with:
  #         name: Build-${{ matrix.secondTargetPlatform }}
  #         path: build


  # buildForWindows:
  #   needs: buildForMac
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: windows-2022
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - StandaloneWindows
  #         - StandaloneWindows64
  #         - WSAPlayer
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #       fetch-depth: 0
  #         lfs: true

  #     - uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library-${{ matrix.targetPlatform }}
  #         restore-keys: |
  #           Library-test-project-
  #           Library-

  #     - uses: game-ci/unity-builder@v4
  #       env:
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #         UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  #       with:
  #         unityVersion: ${{ matrix.unityVersion }}
  #         targetPlatform: ${{ matrix.targetPlatform }}

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: Build-${{ matrix.targetPlatform }}
  #         path: build